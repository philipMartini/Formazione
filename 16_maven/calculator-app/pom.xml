<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>org.filippo.formazione</groupId>
  <artifactId>calculator-app</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>jar</packaging>

  <name>calculator-app</name>
  <!-- FIXME change it to the project's website -->
  <url>http://www.example.com</url>

  <!--Permettono di condensare l'uso dello stesso valore più volte per dipendenze che condividono gli stessi valori -->
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.7</maven.compiler.source>
    <maven.compiler.target>1.7</maven.compiler.target>

    <junit.version>4.11</junit.version>
  </properties>

  <!-- Prima di scaricare dalla remote repo Maven controlla la presenza della dipendenza nella cache locale (~/.m2), la repo locale. 
    Se la versione è SNAPSHOT  dopo 24 ore maven controlla nuovamente nella remote repo se esiste una nuova versione ANCHE se quella usata è presente nella cache locale.-->
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <!-- Cosi si usano le properties-->
      <version>${junit.version}</version>
      <scope>test</scope>
    </dependency>

    <!-- https://mvnrepository.com/artifact/org.apache.commons/commons-lang3 -->
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-lang3</artifactId>
      <version>3.10</version>
      <!--Questo è lo scope di default-->
      <scope>compile</scope>

      <!--Provided è un altro esempio, in cui il runtime env  ha già quelle dipendenze, quindi diciamo a Maven di aggiungerle mentre sto sviluppando (compile time) ma di non includerle mentre sto buildando per la distro. Ad esempio un javaee container-->

      <!--Runtime è l'opposto di provided =>  non mi serve durante lo sviluppo e compilazione ma includino al running e building del progetto. Ad es un db connector driver-->

      <!-- System scope non è quasi mai usato-->
    </dependency>


  </dependencies>

  <!--Questi plugins sono i plugin che vengono utlizzati per effetturare le fasi di lifecycle di Maven.
  In generale per usare un plugin: mvn pluginName:phaseName.
  Nel caso delle fasi di maven mvn compile è uno shortcut per 
  mvn  compiler:compile-->

  <build>
    <pluginManagement>
      <!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
        <!-- clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle -->
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <!-- default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging -->
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.22.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-jar-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
        </plugin>
        <!-- site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle -->
        <plugin>
          <artifactId>maven-site-plugin</artifactId>
          <version>3.7.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-project-info-reports-plugin</artifactId>
          <version>3.0.0</version>
        </plugin>


      </plugins>
    </pluginManagement>
  </build>

  <!--Adding a plugin to site phase => generate tests reports docs -->
  <reporting>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-report-plugin</artifactId>
        <version>3.0.0-M5</version>
      </plugin>
    </plugins>
  </reporting>
</project>